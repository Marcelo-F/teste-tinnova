/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.tinnova.api;

import com.tinnova.model.Error;
import com.tinnova.model.TodosVeiculosPaginado;
import com.tinnova.model.Veiculo;
import com.tinnova.model.VeiculoPatch;
import com.tinnova.model.VeiculoSalvo;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-04T09:09:40.569788920-03:00[America/Sao_Paulo]")
@Validated
@Tag(name = "veiculo", description = "the veiculo API")
public interface VeiculoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /veiculo : Salva um novo carro na base de dados
     * Salva um novo carro na base de dados
     *
     * @param veiculo Salva um novo carro na base de dados (required)
     * @return Successful operation (status code 200)
     *         or Dados enviado inválidos (status code 400)
     *         or Inesperado errou ocorreu (status code 200)
     */
    @Operation(
        operationId = "adicionarCarro",
        summary = "Salva um novo carro na base de dados",
        description = "Salva um novo carro na base de dados",
        tags = { "veiculo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VeiculoSalvo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Dados enviado inválidos"),
            @ApiResponse(responseCode = "default", description = "Inesperado errou ocorreu", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/veiculo",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<VeiculoSalvo> _adicionarCarro(
        @Parameter(name = "Veiculo", description = "Salva um novo carro na base de dados", required = true) @Valid @RequestBody Veiculo veiculo
    ) {
        return adicionarCarro(veiculo);
    }

    // Override this method
    default  ResponseEntity<VeiculoSalvo> adicionarCarro(Veiculo veiculo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"veiculo\" : \"veiculo\", \"marca\" : \"marca do carro\", \"ano\" : 1992, \"created\" : \"2018-03-20T09:12:28Z\", \"cor\" : \"cor\", \"update\" : \"2018-03-20T09:12:28Z\", \"vendido\" : false, \"id\" : 0, \"descricao\" : \"Carro sem avarias\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /veiculo/{id} : Atualiza dados especifico do veículo
     * Atualiza dados especifico do veículo
     *
     * @param id Id de cadastro do veículo na base de dados. (required)
     * @param veiculoPatch  (optional)
     * @return Atualizado com sucesso! (status code 200)
     *         or Dados inválidos enviado. (status code 400)
     *         or Inesperado errou ocorreu (status code 200)
     */
    @Operation(
        operationId = "atualizaDadosEspecificoDoVeculo",
        summary = "Atualiza dados especifico do veículo",
        description = "Atualiza dados especifico do veículo",
        tags = { "veiculo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Atualizado com sucesso!"),
            @ApiResponse(responseCode = "400", description = "Dados inválidos enviado."),
            @ApiResponse(responseCode = "default", description = "Inesperado errou ocorreu", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/veiculo/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _atualizaDadosEspecificoDoVeculo(
        @Parameter(name = "id", description = "Id de cadastro do veículo na base de dados.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "VeiculoPatch", description = "") @Valid @RequestBody(required = false) VeiculoPatch veiculoPatch
    ) {
        return atualizaDadosEspecificoDoVeculo(id, veiculoPatch);
    }

    // Override this method
    default  ResponseEntity<Void> atualizaDadosEspecificoDoVeculo(Long id, VeiculoPatch veiculoPatch) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /veiculo/{id} : Atualizar o veículo através do identificado id.
     * Atualizar o veículo através do identificado id.
     *
     * @param id Id de cadastro do veículo na base de dados. (required)
     * @param veiculoSalvo  (optional)
     * @return Successful operation (status code 200)
     *         or inválido Id (status code 400)
     *         or veículo não encontrado (status code 404)
     *         or Erro na validação (status code 422)
     *         or Inesperado errou ocorreu (status code 200)
     */
    @Operation(
        operationId = "atualizaVeiculoPorId",
        summary = "Atualizar o veículo através do identificado id.",
        description = "Atualizar o veículo através do identificado id.",
        tags = { "veiculo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VeiculoSalvo.class))
            }),
            @ApiResponse(responseCode = "400", description = "inválido Id"),
            @ApiResponse(responseCode = "404", description = "veículo não encontrado"),
            @ApiResponse(responseCode = "422", description = "Erro na validação"),
            @ApiResponse(responseCode = "default", description = "Inesperado errou ocorreu", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/veiculo/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<VeiculoSalvo> _atualizaVeiculoPorId(
        @Parameter(name = "id", description = "Id de cadastro do veículo na base de dados.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "VeiculoSalvo", description = "") @Valid @RequestBody(required = false) VeiculoSalvo veiculoSalvo
    ) {
        return atualizaVeiculoPorId(id, veiculoSalvo);
    }

    // Override this method
    default  ResponseEntity<VeiculoSalvo> atualizaVeiculoPorId(Long id, VeiculoSalvo veiculoSalvo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"veiculo\" : \"veiculo\", \"marca\" : \"marca do carro\", \"ano\" : 1992, \"created\" : \"2018-03-20T09:12:28Z\", \"cor\" : \"cor\", \"update\" : \"2018-03-20T09:12:28Z\", \"vendido\" : false, \"id\" : 0, \"descricao\" : \"Carro sem avarias\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /veiculo/buscarTodosVeiculos : Recupera todos os veículos da base
     * Faz uma busca no banco de dados para retornar todos os dados.
     *
     * @param marca Numero da página (optional)
     * @param ano Tamanho de dados que será trazido por página (optional, default to 0)
     * @param cor Ordena a lista em crescente e descrecente (optional)
     * @return successful operation (status code 200)
     *         or Dados enviado inválidos (status code 400)
     */
    @Operation(
        operationId = "buscarTodosVeiculos",
        summary = "Recupera todos os veículos da base",
        description = "Faz uma busca no banco de dados para retornar todos os dados.",
        tags = { "veiculo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VeiculoSalvo.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Dados enviado inválidos")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/veiculo/buscarTodosVeiculos",
        produces = { "application/json" }
    )
    default ResponseEntity<List<VeiculoSalvo>> _buscarTodosVeiculos(
        @Parameter(name = "marca", description = "Numero da página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "marca", required = false) String marca,
        @Parameter(name = "ano", description = "Tamanho de dados que será trazido por página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ano", required = false, defaultValue = "0") Integer ano,
        @Parameter(name = "cor", description = "Ordena a lista em crescente e descrecente", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cor", required = false) String cor
    ) {
        return buscarTodosVeiculos(marca, ano, cor);
    }

    // Override this method
    default  ResponseEntity<List<VeiculoSalvo>> buscarTodosVeiculos(String marca, Integer ano, String cor) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"veiculo\" : \"veiculo\", \"marca\" : \"marca do carro\", \"ano\" : 1992, \"created\" : \"2018-03-20T09:12:28Z\", \"cor\" : \"cor\", \"update\" : \"2018-03-20T09:12:28Z\", \"vendido\" : false, \"id\" : 0, \"descricao\" : \"Carro sem avarias\" }, { \"veiculo\" : \"veiculo\", \"marca\" : \"marca do carro\", \"ano\" : 1992, \"created\" : \"2018-03-20T09:12:28Z\", \"cor\" : \"cor\", \"update\" : \"2018-03-20T09:12:28Z\", \"vendido\" : false, \"id\" : 0, \"descricao\" : \"Carro sem avarias\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /veiculo/buscarTodosVeiculosPaginado : Recupera todos os veículos da base
     * Faz uma busca no banco de dados para retornar todos os dados.
     *
     * @param pagina Numero da página (optional)
     * @param tamanho Tamanho de dados que será trazido por página (optional, default to 0)
     * @return successful operation (status code 200)
     *         or Dados enviado inválidos (status code 400)
     */
    @Operation(
        operationId = "buscarTodosVeiculosPaginado",
        summary = "Recupera todos os veículos da base",
        description = "Faz uma busca no banco de dados para retornar todos os dados.",
        tags = { "veiculo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TodosVeiculosPaginado.class))
            }),
            @ApiResponse(responseCode = "400", description = "Dados enviado inválidos")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/veiculo/buscarTodosVeiculosPaginado",
        produces = { "application/json" }
    )
    default ResponseEntity<TodosVeiculosPaginado> _buscarTodosVeiculosPaginado(
        @Parameter(name = "pagina", description = "Numero da página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pagina", required = false) Integer pagina,
        @Parameter(name = "tamanho", description = "Tamanho de dados que será trazido por página", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tamanho", required = false, defaultValue = "0") Integer tamanho
    ) {
        return buscarTodosVeiculosPaginado(pagina, tamanho);
    }

    // Override this method
    default  ResponseEntity<TodosVeiculosPaginado> buscarTodosVeiculosPaginado(Integer pagina, Integer tamanho) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pagina\" : 0, \"schema\" : [ { \"veiculo\" : \"veiculo\", \"marca\" : \"marca do carro\", \"ano\" : 1992, \"created\" : \"2018-03-20T09:12:28Z\", \"cor\" : \"cor\", \"update\" : \"2018-03-20T09:12:28Z\", \"vendido\" : false, \"id\" : 0, \"descricao\" : \"Carro sem avarias\" }, { \"veiculo\" : \"veiculo\", \"marca\" : \"marca do carro\", \"ano\" : 1992, \"created\" : \"2018-03-20T09:12:28Z\", \"cor\" : \"cor\", \"update\" : \"2018-03-20T09:12:28Z\", \"vendido\" : false, \"id\" : 0, \"descricao\" : \"Carro sem avarias\" } ], \"tamanho\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /veiculo/{id} : Apaga o cadastro  do veículo salvo na base de dados.
     * Deleta o veículo na base.
     *
     * @param id Id de cadastro do veículo na base de dados. (required)
     * @return veículo deletado com sucesso !! (status code 200)
     *         or Id inválido (status code 400)
     *         or Erro inesperado. (status code 200)
     */
    @Operation(
        operationId = "deletarVeiculo",
        summary = "Apaga o cadastro  do veículo salvo na base de dados.",
        description = "Deleta o veículo na base.",
        tags = { "veiculo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "veículo deletado com sucesso !!"),
            @ApiResponse(responseCode = "400", description = "Id inválido"),
            @ApiResponse(responseCode = "default", description = "Erro inesperado.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/veiculo/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> _deletarVeiculo(
        @Parameter(name = "id", description = "Id de cadastro do veículo na base de dados.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return deletarVeiculo(id);
    }

    // Override this method
    default  ResponseEntity<Void> deletarVeiculo(Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /veiculo/{id} : Encontro o veículo por id de registro na base.
     * Busca um único veículo através do id.
     *
     * @param id ID of pet to return (required)
     * @return Operação realizado com sucesso ! (status code 200)
     *         or Id Invalido (status code 400)
     *         or Dados não encontrado (status code 404)
     *         or Inesperado errou ocorreu (status code 200)
     */
    @Operation(
        operationId = "findById",
        summary = "Encontro o veículo por id de registro na base.",
        description = "Busca um único veículo através do id.",
        tags = { "veiculo" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operação realizado com sucesso !", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VeiculoSalvo.class))
            }),
            @ApiResponse(responseCode = "400", description = "Id Invalido"),
            @ApiResponse(responseCode = "404", description = "Dados não encontrado"),
            @ApiResponse(responseCode = "default", description = "Inesperado errou ocorreu", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/veiculo/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<VeiculoSalvo> _findById(
        @Parameter(name = "id", description = "ID of pet to return", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return findById(id);
    }

    // Override this method
    default  ResponseEntity<VeiculoSalvo> findById(Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"veiculo\" : \"veiculo\", \"marca\" : \"marca do carro\", \"ano\" : 1992, \"created\" : \"2018-03-20T09:12:28Z\", \"cor\" : \"cor\", \"update\" : \"2018-03-20T09:12:28Z\", \"vendido\" : false, \"id\" : 0, \"descricao\" : \"Carro sem avarias\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
